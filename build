#!/bin/sh

# Simple wrapper for conda-build that defines the appropriate tag and date for
# internal Gemini package builds.
#
# (If the local date is liable to change between invoking ./checkout & ./build,
# it can be set in the environment prior to running these scripts, but will
# then need updating when building on different days in a persistent session).

deps="conda-build"

# Parse script arguments:
status=1
unset tag conda_args
while [ -n "$1" ]; do
    case "$1" in
        -h|--help)
            conda_args=""
            status=0
            break
            ;;
        --tag)
            if [ -n "$tag" ]; then
                status=1
                break
            fi
            shift
            tag=$1
            ;;
        *)
            val=`echo "$1" | sed -e 's|/*$||'`
            if [ -z "$conda_args" ]; then
                conda_args=$val
                status=0
            else
                conda_args="${conda_args} $val"
            fi
            ;;
    esac
    shift
done

if [ -z "$conda_args" -o $status = 1 ]; then
    echo "Usage: `basename $0` [-h] [--tag tag] conda_args" >&2
    exit $status
fi

# Get common build configuration & parse the version tag:
. ./config || exit 1

# Delegate the build to conda (recipes pick up tag & DATE from environment).
# Logging while displaying to STDOUT without losing the error status gets
# insanely convoluted (http://www.unix.com/302265010-post3.html), so capture
# the output from this script if needed (which is more modular anyway).
conda-build $conda_args || exit 1

exit $status

