#!/usr/bin/env python

# List non-Gemini packages in a named conda env, in a format suitable for
# pasting into meta.yaml, to help construct gemini-base. This script previously
# listed packages not in the anaconda meta-package, but there's no longer such
# a thing with conda-forge, making this step more trivial.

import os
import argparse
import re

from conda.base.context import context
from conda.exports import linked
# from conda.core.subdir_data import SubdirData
# from conda.models.match_spec import MatchSpec

# Don't list packages beginning with the following names:
exclude = re.compile('astrodata|dragons|gemaux|gemini|iraf.gemini$')

parser = argparse.ArgumentParser(
    description='List the non-Gemini packages in an env for meta.yaml'
)
parser.add_argument('env_name', metavar='env_name', type=str,
                    help='Name of an env in the active anaconda installation')

args = parser.parse_args()


# Configure conda "context" (channels etc.):
context.__init__(argparse_args={'name' : args.env_name})
prefix = context.target_prefix

if not os.path.isdir(prefix):
    raise IOError('No env {0}'.format(args.env_name))

# Get installed packages:
pkg_list = linked(prefix)
pkg_dict = {pkg.name : (pkg.version, pkg.build) for pkg in pkg_list}

selector = f'{context.platform}'

# List installed non-Gemini packages:
for pkg in sorted(pkg_dict):
    if not exclude.match(pkg):
        version, build = pkg_dict[pkg]
        spec = f'{pkg} {version} {build}'
        print(f'  - {spec:<53} # [{selector}]')

